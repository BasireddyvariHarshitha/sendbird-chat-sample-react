import User from '../user';
import RestrictedUser from '../restrictedUser';
import { ChannelType, MetaCounter, MetaData } from '../channel/types';
import BaseChannel from '../channel/baseChannel';
import BaseMessage from '../message/baseMessage';
import ReactionEvent from '../event/reactionEvent';
import ThreadInfoUpdateEvent from '../event/threadInfoUpdateEvent';
export declare abstract class BaseChannelHandlerParams {
    onUserMuted?: (channel: BaseChannel, user: RestrictedUser) => void;
    onUserUnmuted?: (channel: BaseChannel, user: User) => void;
    onUserBanned?: (channel: BaseChannel, user: RestrictedUser) => void;
    onUserUnbanned?: (channel: BaseChannel, user: User) => void;
    onChannelChanged?: (channel: BaseChannel) => void;
    onChannelDeleted?: (channelUrl: string, channelType: ChannelType) => void;
    onChannelFrozen?: (channel: BaseChannel) => void;
    onChannelUnfrozen?: (channel: BaseChannel) => void;
    onOperatorUpdated?: (channel: BaseChannel, users: User[]) => void;
    onChannelMemberCountChanged?: (channels: BaseChannel[]) => void;
    onMetaDataCreated?: (channel: BaseChannel, metaData: MetaData) => void;
    onMetaDataUpdated?: (channel: BaseChannel, metaData: MetaData) => void;
    onMetaDataDeleted?: (channel: BaseChannel, metaDataKeys: string[]) => void;
    onMetaCounterCreated?: (channel: BaseChannel, metaCounter: MetaCounter) => void;
    onMetaCounterUpdated?: (channel: BaseChannel, metaCounter: MetaCounter) => void;
    onMetaCounterDeleted?: (channel: BaseChannel, metaCounterKeys: string[]) => void;
    onMessageReceived?: (channel: BaseChannel, message: BaseMessage) => void;
    onMessageUpdated?: (channel: BaseChannel, message: BaseMessage) => void;
    onMessageDeleted?: (channel: BaseChannel, messageId: number) => void;
    onMentionReceived?: (channel: BaseChannel, message: BaseMessage) => void;
    onReactionUpdated?: (channel: BaseChannel, reactionEvent: ReactionEvent) => void;
    onThreadInfoUpdated?: (channel: BaseChannel, threadInfoUpdateEvent: ThreadInfoUpdateEvent) => void;
}
